// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/server.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSvc is a mock of Svc interface.
type MockSvc struct {
	ctrl     *gomock.Controller
	recorder *MockSvcMockRecorder
}

// MockSvcMockRecorder is the mock recorder for MockSvc.
type MockSvcMockRecorder struct {
	mock *MockSvc
}

// NewMockSvc creates a new mock instance.
func NewMockSvc(ctrl *gomock.Controller) *MockSvc {
	mock := &MockSvc{ctrl: ctrl}
	mock.recorder = &MockSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSvc) EXPECT() *MockSvcMockRecorder {
	return m.recorder
}

// HandleSignal mocks base method.
func (m *MockSvc) HandleSignal(arg0 chan os.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleSignal", arg0)
}

// HandleSignal indicates an expected call of HandleSignal.
func (mr *MockSvcMockRecorder) HandleSignal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSignal", reflect.TypeOf((*MockSvc)(nil).HandleSignal), arg0)
}

// Launch mocks base method.
func (m *MockSvc) Launch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Launch")
	ret0, _ := ret[0].(error)
	return ret0
}

// Launch indicates an expected call of Launch.
func (mr *MockSvcMockRecorder) Launch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Launch", reflect.TypeOf((*MockSvc)(nil).Launch))
}

// Teardown mocks base method.
func (m *MockSvc) Teardown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Teardown")
}

// Teardown indicates an expected call of Teardown.
func (mr *MockSvcMockRecorder) Teardown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*MockSvc)(nil).Teardown))
}
